@article{Gorschek2006,
author = {Gorschek, Tony},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/10.1.1.95.6735.pdf:pdf},
journal = {Development},
title = {{The Economics of Success Evaluation and Measures in Software Process Improvement}},
year = {2006}
}
@article{Garlan2011,
abstract = {Software Architecture emerged in the 1990's as an important sub-field of software engineering. While good architectural design had long been recognized as critical to the success of any complex software system, before then the practice of architecting had relied largely on ad hoc, uncodified, and idiosyncratic techniques and knowledge. By the 2000's the field had matured to the point where there were widely-recognized taxonomies of architectural patterns, techniques for formally representing and analyzing architectures, methods for reviewing an architectural design, widespread adoption of architectural product lines and composition frameworks, and techniques for ensuring conformance between an architecture and an implementation of it. In this talk we reflect on the key enablers of a discipline of software architecture that led to these advances, the central ideas that form its core, and its enduring principles that continue to shape the field of software engineering. We consider both the important concepts on which it builds, as well as those that have built on top of it. Finally, we examine some of the important new trends and challenges that are likely to have an impact on how software architecture will evolve in the future.},
author = {Garlan, David and Shaw, Mary},
doi = {10.1145/2025113.2025116},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Garlan, Shaw - 2011 - Software Architecture Reflections on an Evolving Discipline.pdf:pdf},
isbn = {978-1-4503-0443-6},
journal = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
keywords = {architecture,keynotes,software},
mendeley-tags = {keynotes},
pages = {2},
title = {{Software Architecture: Reflections on an Evolving Discipline}},
url = {http://doi.acm.org/10.1145/2025113.2025116},
year = {2011}
}
@online{crouch_stephen_software_2013,
	title = {The {Software} {Sustainability} {Institute}},
	url = {http://www.software.ac.uk/},
	abstract = {"The Software Sustainability Institute: Changing Research Software Attitudes and Practices," },
	journal = {The Software Sustainability Institute},
	author = {Crouch, Stephen, et. al},
	month = dec,
	year = {2013},
	note = {Computing in Science \& Engineering , vol.15, no.6, pp.74,80, .}
}
@book{BachmannDocumentingSoftware2010,
author = {Bachmann, Felix and Bass, Len and Clements, Paul and Garlan, David and Ivers, James and Little, M and Merson, Paulo and Nord, Robert and Stafford, Judith},
edition = {Second},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bachmann et al. - 2010 - Documenting Software Architectures Views and Beyond.pdf:pdf},
publisher = {Addison-Wesley Professional},
title = {{Documenting Software Architectures: Views and Beyond}},
year = {2010}
}
@book{munch2012software,
  title={Software Process Definition and Management},
  author={M{\"u}nch, J{\"u}rgen and Armbrust, Ove and Kowalczyk, Martin and Soto, Martin},
  year={2012},
  publisher={Springer Science \& Business Media}
}
@online{yeates_stuart_OSS_2008,
	title = {{OSS}{Watch}},
	url = {http://oss-watch.ac.uk/resources/archived/documentation},
	author = {Yeates, Stuart},
	month = jun,
	year = {2008}
}
@article{Fuggeffa1988,
author = {Fuggeffa, Alfonso and Fuggetta, Alfonso and Milano, Politecnico},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/TUM Studies/4th sem/software proess.pdf:pdf},
isbn = {1581132530},
title = {{Software Process : A Roadmap Software Process : A Roadmap}},
volume = {97},
year = {1988}
}
@book{Scacchi2007,
author = {Scacchi, Walt},
booktitle = {Advances in Computers},
doi = {10.1016/S0065-2458(06)69005-0},
isbn = {9780123737458},
issn = {00652458},
pages = {243--295},
publisher = {Elsevier},
series = {Advances in Computers},
title = {{Architectural Issues}},
url = {http://www.sciencedirect.com/science/article/pii/S0065245806690050},
volume = {69},
year = {2007}
}
@book{Kim:2000:CBW:518514,
 author = {Kim, Amy Jo},
 title = {Community Building on the Web: Secret Strategies for Successful Online Communities},
 year = {2000},
 isbn = {0201874849},
 edition = {1st},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA},
}
@article{Zhao2003,
abstract = {The open source development model has defied traditional software development practices by generating widely accepted products (e.g., Linux, Apache, Perl) while following unconventional principles such as the distribution of free source code and massive user participation. Those achievements have initiated and supported many declarations about the potential of the open source model to accelerate the development of reliable software. However, the pronouncements in favor or against this model have been usually argumentative, lacking of empirical evidence to support either position. Our work uses a survey to overcome those limitations. The study explores how software quality assurance is performed under the open source model, how it differs from more traditional software development models, and whether some of those differences could translate into practical advantages given the right circumstances. The findings indicate that open source has certainly introduced a new dimension in large-scale distributed software development. However, we also discovered that the potential of open source might not be exploitable under all scenarios. Furthermore, we found that many of the open source quality assurance activities are still evolving.},
author = {Zhao, Luyin and Elbaum, Sebastian},
doi = {10.1016/S0164-1212(02)00064-X},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Open source,Quality assurance,Software development models,Survey},
month = apr,
number = {1},
pages = {65--75},
title = {{Quality assurance under the open source development model}},
url = {http://www.sciencedirect.com/science/article/pii/S016412120200064X},
volume = {66},
year = {2003}
}

@inproceedings{6923128,
author = {Ding, Wei and Liang, Peng and Tang, Antony and Vliet, Hans Van and Shahin, Mojtaba},
booktitle = {2014 19th International Conference on Engineering of Complex Computer Systems},
doi = {10.1109/ICECCS.2014.26},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ding et al. - 2014 - How Do Open Source Communities Document Software Architecture An Exploratory Survey.pdf:pdf},
isbn = {978-1-4799-5482-7},
keywords = {OSS d,SAD,architecture document elements,architecture documentation,open source software,public domain software,software architecture},
mendeley-tags = {SAD,open source software},
month = aug,
pages = {136--145},
title = {{How Do Open Source Communities Document Software Architecture: An Exploratory Survey}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6923128},
year = {2014}
}
@online{eclipse2013,
	title = {{Eclipse}},
	url = {https://eclipse.org/projects/dev_process/development_process.php},
	year = {2013},
 	crossref = {https://wiki.eclipse.org/Main_Page}
}
@article{Shahin2009,
abstract = {In the field of software architecture, there has been a paradigm shift from describing the outcome of architecting process mostly described by component and connector (know-what) to documenting architectural design decisions and their rationale (know-how) which leads to the production of an architecture. This paradigm shift results in emergence of various models and related tools for capturing, managing and sharing architectural design decisions and their rationale explicitly. This paper analyzes existing architectural design decisions models and provides a criteria-based comparison on tools that support these models. The major contribution of this paper is twofold: to show that all of these models have a consensus on capturing the essence of an architectural design decision; and to clarify the major difference among the tools and show what desired features are missing in these tools.},
author = {Shahin, Mojtaba and Liang, Peng and Khayyambashi, Mohammad Reza},
doi = {10.1109/WICSA.2009.5290823},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/05290823.pdf:pdf},
isbn = {978-1-4244-4984-2},
journal = {2009 Joint Working IEEE/IFIP Conference on Software Architecture \& European Conference on Software Architecture},
pages = {293--296},
title = {{Architectural design decision: Existing models and tools}},
url = {10.1109/WICSA.2009.5290823$\backslash$nhttp://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5290823},
year = {2009}
}
@book{BachmannDocumentingSoftware2010,
author = {Bachmann, Felix and Bass, Len and Clements, Paul and Garlan, David and Ivers, James and Little, M and Merson, Paulo and Nord, Robert and Stafford, Judith},
edition = {Second},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bachmann et al. - 2010 - Documenting Software Architectures Views and Beyond.pdf:pdf},
publisher = {Addison-Wesley Professional},
title = {{Documenting Software Architectures: Views and Beyond}},
year = {2010}
}
@incollection{bab2009,
abstract = {In this chapter we survey how architects have represented architectural 6 knowledge and in particular architectural design. This has evolved over the last 7 3 decades, from very intuitive and informal, to very structured, abstract and for- 8 mal, from simple diagrams and metaphors, design notations, and specific languages. 9 As our understanding of architectural knowledge evolved, the importance of de- 10 sign rationale and the decision process became more and more prominent. There is 11 however a constant through this evolution: the systematic use of metaphors. 12 3.1},
author = {Kruchten, Philippe},
booktitle = {Software Architecture Knowledge Management},
chapter = {3},
doi = {10.1007/978-3-642-02374-3\_3},
editor = {{Ali Babar}, Muhammad and Dings\o yr, Torgeir and Lago, Patricia and van Vliet, Hans},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kruchten - 2009 - Documentation of Software Architecture from a Knowledge Management Perspective – Design Representation.pdf:pdf},
isbn = {978-3-642-02373-6},
keywords = {architecture knowledge,documenting rational},
mendeley-tags = {architecture knowledge,documenting rational},
pages = {39--57},
publisher = {Springer Berlin Heidelberg},
title = {{Documentation of Software Architecture from a Knowledge Management Perspective – Design Representation}},
url = {http://dx.doi.org/10.1007/978-3-642-02374-3\_3},
year = {2009}
}
@article{Ajila2007,
abstract = {In this paper, we present the results of empirical study of the effects of open source software (OSS) components reuse on software development economics. Specifically, we examined three economic factors – cost, productivity, and quality. This study started with an extensive literature review followed by an exploratory study conducted through interviews with 18 senior project/quality managers, and senior software developers. Then, the result of the literature review and the exploratory study was used to formulate research model, hypotheses, and survey questionnaire. Software intensive companies from Canada and the US were targeted for this study. The period of study was between September 2004 and March 2006. Our findings show that there are strong significant statistical correlations between the factors of OSS components reuse and software development economics. The conclusion from this study shows that software organizations can achieve some economic gains in terms of software development productivity and product quality if they implement OSS components reuse adoption in a systematic way. A big lesson learned in this study is that OSS components are of highest quality and that open source community is not setting a bad example (contrary to some opinion) so far as ‘good practices’ are concerned.},
author = {Ajila, Samuel A. and Wu, Di},
doi = {10.1016/j.jss.2007.01.011},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Adoption,Measurement and economics,Open source software,Productivity,Quality,Reuse,Software process improvement},
month = sep,
number = {9},
pages = {1517--1529},
title = {{Empirical study of the effects of open source adoption on software development economics}},
url = {http://www.sciencedirect.com/science/article/pii/S0164121207000076},
volume = {80},
year = {2007}
}
@InProceedings{michlmayr:quality_problems,
  author =       {Michlmayr, Martin and Hunt, Francis and Probert, David},
  title =        {Quality Practices and Problems in Free Software Projects},
  editor =       {Scotto, Marco and Succi, Giancarlo},
  booktitle =    {Proceedings of the First International Conference on Open Source Systems},
  pages =        {24-28},
  address =      {Genova, Italy},
  year =         {2005},
}
@article {SMR:SMR572,
author = {Kruchten, Philippe},
title = {Contextualizing agile software development},
journal = {Journal of Software: Evolution and Process},
volume = {25},
number = {4},
issn = {2047-7481},
url = {http://dx.doi.org/10.1002/smr.572},
doi = {10.1002/smr.572},
pages = {351--361},
keywords = {agile software development, software development process, process adaptation},
year = {2013},
}
@incollection{ALM2009,
year={2009},
isbn={978-1-4302-1080-1},
booktitle={Pro Visual Studio Team System Application Lifecycle Management},
doi={10.1007/978-1-4302-1079-5_2},
title={Application Lifecycle Management},
url={http://dx.doi.org/10.1007/978-1-4302-1079-5_2},
publisher={Apress},
pages={23-41},
language={English}
}
@article{Briand2003,
abstract = { It is a well-known fact that software documentation is, in practice, poor and incomplete. Though specification, design, and test documents-among other things-are required by standards and capability maturity models (e.g., SEI CMM), such documentation does not exist in a complete and consistent form in most organizations. When documents are produced, they tend to follow no defined standard and lack information that is crucial to make them understandable and usable by developers and maintainers. Then a fundamental practical question, which motivated this keynote address, is to better understand what type of documentation is required, what is needed to support its completeness and consistency, and what is the level of precision required for each type of document. These questions cannot be investigated at that level of generality though. Answers are likely to be very context-dependent if they are to be precise. We focus our attention here on object-oriented development and the Unified Modeling Language (UML).},
author = {Briand, L.C.},
doi = {10.1109/CSMR.2003.1192406},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/briandswdoc.pdf:pdf},
isbn = {0-7695-1902-4},
issn = {1534-5351},
journal = {Seventh European Conference onSoftware Maintenance and Reengineering, 2003. Proceedings.},
title = {{Software documentation: how much is enough?}},
year = {2003}
}
@article{SCAMPITeam2013,
author = {{SCAMPI Team}},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/11hb001.pdf:pdf},
keywords = {CMMI,Class A method,Document Description,MDD,Method,SCAMPI A,appraisal,appraisal method},
number = {March},
title = {{Standard CMMI Appraisal Method for Process Improvement (SCAMPI) Version 1.3a: Method Definition Document for SCAMPI A, B, and C}},
year = {2013}
}
@article{Duijnhouwer2003,
abstract = {In order to be able to determine if an open source product is Frans-Willem Duijnhouwer suitable for an organisation, Capgemini has developed the Chris Widdows Open Source Maturity Model. This model allows you to determine if or which open source product is suitable using just seven clear steps. Not only a good way to keep interesting but immature products away from your business, but also an useful tool to objectify the discussion on applying Open Source in the workplace. Given the current strong political interest for Open Source, having a professional approach to open source products is an asset.},
author = {Duijnhouwer, Frans-Willem and Widdows, Chris},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/GB\_Expert\_Letter\_Open\_Source\_Maturity\_Model\_1.5.3.pdf:pdf},
journal = {Capgemini Expert Letter},
number = {August},
pages = {18},
title = {{Open Surce Maturity Model}},
url = {http://bolsa.info.unlp.edu.ar/campamento/campamento/documentos/GB\_Expert\_Letter\_Open\_Source\_Maturity\_Model\_1.5.3.pdf},
year = {2003}
}
@article{Golden2006,
author = {Golden, Bernard},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/Open Source in the Enterprise Paper.pdf:pdf},
title = {{Open Source in the Enterprise : From Invisible to Transparent The Litany of Enterprise Open Source Complaints}},
year = {2006}
}
@article{Wu2001,
author = {Wu, Ming-wei and Lin, Ying-dar},
number = {June},
pages = {33--38},
title = {{Open Source Software Development : An Overview}},
year = {2001}
}
@article{Mens2011,
abstract = {Empirical software engineering is concerned with statistical studies that aim to understand and improve certain aspects of the soft- ware development process. Many of these focus on the evolution and maintenance of evolving software projects. They rely on repository min- ing techniques to extract relevant data from software repositories or other data sources frequently used by software developers. We enlarge these empirical studies by exploring social software engineering, study- ing the developer community, including the way developers work, coop- erate, communicate and share information. The underlying hypothesis is that social aspects significantly influence the way in which the software project will evolve over time. We present some preliminary results of an empirical study we are carrying out on the different types of activities of the community involved in the GNOME open source ecosystem, and we discuss suggestions for future work.},
author = {Mens, Tom and Goeminne, Mathieu},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/IWSECO2011-1-InvitedPaper-MensGoeminne.pdf:pdf},
journal = {Proc. 3rd Int. Workshop on Software Ecosystems},
keywords = {empirical software engi- neering,open source software,repository mining,social software engineering,software ecosystem,software evolution},
pages = {1--14},
title = {{Analysing the evolution of social aspects of open source software ecosystems}},
url = {http://ceur-ws.org/Vol-746/IWSECO2011-1-InvitedPaper-MensGoeminne.pdf},
year = {2011}
}
@article{Scacchi2006,
abstract = {This article introduces a special issue of Software Process – Improvement and Practice focusing on processes found in free or open source software development (F/OSSD) projects. It seeks to provide a background overview of research in this area through a review of selected empirical studies of F/OSSD processes. The results and findings from a survey of empirical studies of F/OSSD give rise to an interesting variety of opportunities and challenges for understanding these processes, which are identified along the way. Overall, what becomes clear is that studies of F/OSSDprocesses reveal a more diverse set of different types of processes than have typically been examined in conventional software development projects. The articles in this special issue further advance understanding of what processes characterize and shape F/OSSD. Copyright},
author = {Scacchi, Walt and Feller, Joseph and Fitzgerald, Brian and Hissam, Scott and Lakhani, Karim},
doi = {10.1002/spip.255},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Scacchi et al. - 2006 - Understanding freeopen source software development processes.pdf:pdf},
isbn = {1099-1670},
issn = {10774866},
journal = {Software Process Improvement and Practice},
keywords = {Free software development,Free/open source software processes,Open source software development},
pages = {95--105},
title = {{Understanding free/open source software development processes}},
volume = {11},
year = {2006}
}

@inproceedings{5314237,
author = {Soto, M and Ciolkowski, M},
booktitle = {Empirical Software Engineering and Measurement, 2009. ESEM 2009. 3rd International Symposium on},
doi = {10.1109/ESEM.2009.5314237},
file = {::},
issn = {1938-6451},
keywords = {DP industry,EU project QualOSS open source assessment model,OSS community sustainability,OSS project,Software engineering,Software measurement,comprehensive measurement framework,open source community performance measurement,open source software,process maturity,product quality standard,project management,public domain software,software development management,software industry,software maintenance,software metrics,software quality},
month = oct,
pages = {498--501},
title = {{The QualOSS open source assessment model measuring the performance of open source communities}},
year = {2009}
}
@incollection{SPM_2005,
year={2005},
isbn={978-0-387-24261-3},
booktitle={Software Process Modeling},
volume={10},
series={International Series in Software Engineering},
editor={Acuña, SilviaT. and Juristo, Natalia},
doi={10.1007/0-387-24262-7_1},
title={Socio-Technical Interaction Networks in Free/Open Source Software Development Processes},
url={http://dx.doi.org/10.1007/0-387-24262-7_1},
publisher={Springer US},
author={Scacchi, Walt},
pages={1-27},
language={English}
}

@article{Shahin2014,
abstract = {Context Given the increased interest in using visualization techniques (VTs) to help communicate and understand software architecture (SA) of large scale complex systems, several VTs and tools have been reported to represent architectural elements (such as architecture design, architectural patterns, and architectural design decisions). However, there is no attempt to systematically review and classify the VTs and associated tools reported for SA, and how they have been assessed and applied. Objective This work aimed at systematically reviewing the literature on software architecture visualization to develop a classification of VTs in SA, analyze the level of reported evidence and the use of different VTs for representing SA in different application domains, and identify the gaps for future research in the area. Method We used systematic literature review (SLR) method of the evidence-based software engineering (EBSE) for reviewing the literature on VTs for SA. We used both manual and automatic search strategies for searching the relevant papers published between 1 February 1999 and 1 July 2011. Results We selected 53 papers from the initially retrieved 23,056 articles for data extraction, analysis, and synthesis based on pre-defined inclusion and exclusion criteria. The results from the data analysis enabled us to classify the identified VTs into four types based on the usage popularity: graph-based, notation-based, matrix-based, and metaphor-based VTs. The VTs in SA are mostly used for architecture recovery and architectural evolution activities. We have also identified ten purposes of using VTs in SA. Our results also revealed that VTs in SA have been applied to a wide range of application domains, among which "graphics software" and "distributed system" have received the most attention. Conclusion SA visualization has gained significant importance in understanding and evolving software-intensive systems. However, only a few VTs have been employed in industrial practice. This review has enabled us to identify the following areas for further research and improvement: (i) it is necessary to perform more research on applying visualization techniques in architectural analysis, architectural synthesis, architectural implementation, and architecture reuse activities; (ii) it is essential to pay more attention to use more objective evaluation methods (e.g., controlled experiment) for providing more convincing evidence to support the promised benefits of using VTs in SA; (iii) it is important to conduct industrial surveys for investigating how software architecture practitioners actually employ VTs in architecting process and what are the issues that hinder and prevent them from adopting VTs in SA. ?? 2014 Elsevier Inc.},
author = {Shahin, Mojtaba and Liang, Peng and Babar, Muhammad Ali},
doi = {10.1016/j.jss.2014.03.071},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shahin, Liang, Babar - 2014 - A systematic review of software architecture visualization techniques.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Software architecture,Software architecture visualization,Visualization techniques},
pages = {161--185},
publisher = {Elsevier Inc.},
title = {{A systematic review of software architecture visualization techniques}},
url = {http://dx.doi.org/10.1016/j.jss.2014.03.071},
volume = {94},
year = {2014}
}
@article{Bachmann2005,
abstract = {In an organization that uses an architecture-centric development approach, it is the purpose of the software architecture, especially the product documentation to guide all stakeholders who contribute in one way or another to the development of the product(s). Unfortunately, in many organizations, this documentation ends up on the shelves, unused and collecting dust. This happens in part because it is difficult to keep the architecture documentation current, hard for nondevelopers to understand what the documents describe, and challenging for nondevelopers to use the tools necessary to access the documentation. This technical note discusses the benefits and challenges of using a wiki-based collaborative environment to create software architecture documentation. The findings are based on two experiences. The first was that of a team of Carnegie Mellon University Master of Software Engineering (MSE) program students that used the wiki tool in a real-world software project. For its customer, the team had to produce and document the architecture of a system that will be developed by many geographically distributed teams. The second experience was a study conducted by another MSE student to reconstruct and document the architecture of a multitier enterprise application using the wiki tool and UML 2.0.},
author = {Bachmann, Felix and Merson, Paulo and Architecture, Software and Initiative, Technology and Cmu, Technical Note},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/TUM Studies/4th sem/Experience Using the Wiki for Software Arch Doc.pdf:pdf},
issn = {1548-8837, 1548-8837},
journal = {Technology},
number = {September},
title = {{Experience Using the Web-Based Tool Wiki for Architecture Documentation}},
year = {2005}
}
@article{Kruchten2008,
abstract = {To be successful, a software architect—or a software architecture team, collectively—must strike a delicate balance between an external focus—both outwards: Listening to customers, users, watching technology, developing a long-term vision, and inwards: driving the development teams—and an internal, reflective focus: spending time to make the right design choices, validating them, and documenting them. Teams that stray too far away from this metastable equilibrium fall into some traps that we describe as antipatterns of software architecture teams.},
author = {Kruchten, Philippe},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kruchten - 2008 - What do software architects really do.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {(roles,),Antipattern,Software architect,Software architecture,Time-management,activities},
mendeley-tags = {(roles,),activities},
month = dec,
number = {12},
pages = {2413--2416},
title = {{What do software architects really do?}},
url = {http://www.sciencedirect.com/science/article/pii/S0164121208002057},
volume = {81},
year = {2008}
}
@article{Mockus2000,
abstract = {According to its proponents, open source style software development has the capacity to compete successfully, and perhaps in many cases displace, traditional commercial development methods. In order to begin investigating such claims, we examine the development process of a major open source application, the Apache web server. By using email archives of source code change history and problem reports we quantify aspects of developer participation, core team size, code ownership, productivity, defect density, and problem resolution interval for this OSS project. This analysis reveals a unique process, which performs well on important measures. We conclude that hybrid forms of development that borrow the most effective techniques from both the OSS and commercial worlds may lead to high performance software processes.},
author = {Mockus, a and Fielding, R T and Herbsleb, J},
doi = {10.1109/ICSE.2000.870417},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/p263-mockus.pdf:pdf},
isbn = {1581132069},
issn = {02705257},
journal = {Proceedings of the 2000 International Conference on Software Engineering ICSE 2000 the New Millennium},
keywords = {code,defect density,open source,ownership,repair interval,software process},
pages = {263--272},
pmid = {17872492},
title = {{A case study of open source software development: the Apache server}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=870417},
volume = {0},
year = {2000}
}
@book{Standard2007,
author = {Standard, International},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/4278472.pdf:pdf},
isbn = {0738125180},
title = {{INTERNATIONAL STANDARD ISO / IEC}},
volume = {2007},
year = {2007}
}
@article{Berander2005,
author = {Berander, Patrik and Damm, Lars-ola and Eriksson, Jeanette and Gorschek, Tony and Henningsson, Kennet and J\"{o}nsson, Per and K\aa gstr\"{o}m, Simon and Milicic, Drazen and M\aa rtensson, Frans and R\"{o}nkk\"{o}, Kari and Tomaszewski, Piotr and Lundberg, Lars and Mattsson, Michael and Wohlin, Claes},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/10.1.1.101.5016.pdf:pdf},
number = {June},
pages = {1--100},
title = {{Software quality attributes and trade-offs}},
year = {2005}
}
@article{Employee,
author = {Employee, Developing and Programs, Orientation and Ministers, Deputy},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/EmployeeOrientationProgramGuidelines.pdf:pdf},
pages = {1--5},
title = {{Employee Orientation Program Guidelines Purpose}}
}
@article{Humphrey1993,
author = {Humphrey, Watts S},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/Introduction to Software Process Improvement.pdf:pdf},
title = {{Introduction to Software Process Improvement}},
year = {1993}
}
@article{Unterkalmsteiner2011,
abstract = {BACKGROUND\&x2014;Software Process Improvement (SPI) is a systematic approach to increase the efficiency and effectiveness of a software development organization and to enhance software products. OBJECTIVE\&x2014;This paper aims to identify and characterize evaluation strategies and measurements used to assess the impact of different SPI initiatives. METHOD-The systematic literature review includes 148 papers published between 1991 and 2008. The selected papers were classified according to SPI initiative, applied evaluation strategies and measurement perspectives. Potential confounding factors interfering with the evaluation of the improvement effort were assessed. RESULTS-Seven distinct evaluation strategies were identified, whereas the most common one,},
author = {Unterkalmsteiner, Michael and Gorschek, Tony and Islam, a K M Moinul and Cheng, Chow Kian and Permadi, Rahadian Bayu and Feldt, Robert},
doi = {10.1109/TSE.2011.26},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/unterkalmsteiner\_2011\_tse\_spi\_sysrev.pdf:pdf},
isbn = {0098-5589 VO  - 38},
issn = {00985589},
journal = {IEEE Transactions on Software Engineering},
pages = {1--29},
title = {{Evaluation and Measurement of Software Process Improvement - A Systematic Literature Review}},
url = {http://www.computer.org/portal/web/csdl/doi/10.1109/TSE.2011.26},
volume = {X},
year = {2011}
}
@article{Lavallee2011,
abstract = {This paper presents preliminary results of a systematic review performed to determine the impacts of Software Process Improvements (SPI) on developers' activities and on architectural quality. The analysis shows that most SPI research focuses on the motivations of developers like quality of work life and participation incentives, but provides little detail on the impacts of SPI on their day-to-day tasks. The impacts on product quality are limited to defect reduction, and do not consider architectural quality factors, such as changeability and stability. This study shows a very weak link between process quality, as defined by the CMMI, and architectural quality, as defined by ISO 9126. The SPI literature found by this review is mostly concerned with requirement process improvements, which are related to problem definition quality, but not to architectural quality. Future quality-oriented SPI research should therefore focus on improving design and development processes with an eye to considering architectural quality factors, or what the ISO 9126 terms architectural capabilities.},
author = {Lavall\'{e}e, Mathieu and Robillard, Pierre N},
doi = {10.1145/2024587.2024592},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/p11-lavallee.pdf:pdf},
isbn = {9781450308519},
journal = {Proceedings of the 8th international workshop on Software quality WoSQ 11},
keywords = {capability maturity model,impacts developers,process improvement,quality improvement,software,systematic},
pages = {11--17},
title = {{Do software process improvements lead to ISO 9126 architectural quality factor improvement}},
url = {http://dl.acm.org/citation.cfm?doid=2024587.2024592},
year = {2011}
}
@online{Maintainers_2014,
	title = {{Developers/}{Maintainers}},
	url = {https://www.mediawiki.org/wiki/Developers/Maintainers},
	month = July,
	year = {2014}
}
@online{Bots_2007,
	title = {{Project:}{Bots}},
	url = {https://www.mediawiki.org/wiki/Project:Bots},
	month = Oct,
	year = {2007}
}
@online{Xwiki_Massol_2014,
	title = {Xwiki},
	url = {http://www.xwiki.org/xwiki/bin/view/Main/WebHome},
	crossref = {http://www.xwiki.org/xwiki/bin/view/Main/Documentation},
	month = Jan,
	authoe = {Vincent Massol},
	year = {2014}
}
@online{Manual_coding,
	title = {{Manual:}{Coding conventions}},
	url = {https://www.mediawiki.org/wiki/Manual:Coding_conventions}
}
@online{Installation_guide,
	title = {{Manual:}{Installation Guide}},
	url = {https://www.mediawiki.org/wiki/Manual:Installation_guide#Main_installation_guide}
}
@online{api_tutorial,
	title = {{API:}{Tutorial}},
	url = {https://www.mediawiki.org/wiki/API:Tutorial}
}
@online{manual_extensions,
	title = {{Manual:}{Extensions}},
	url = {https://www.mediawiki.org/wiki/Manual:Extensions}
}
@online{help_pp,
	title = {{Help:}{Protected pages}},
	url = {https://www.mediawiki.org/wiki/Help:Protected_pages}
}
@online{manual_pwb,
	title = {{Manual:}{Pywikibot}},
	url = {https://www.mediawiki.org/wiki/Manual:Pywikibot}
}
@online{phab_api,
	title = {{phabricator}{Conduit}{API}},
	url = {https://secure.phabricator.com/book/phabdev/article/conduit/}
}
@online{mw_api,
	title = {{API:}{Main}{Page}},
	url = {https://www.mediawiki.org/wiki/API:Main_page}
}
@online{git_py,
	title = {{GitPython}},
	url = {https://pypi.python.org/pypi/GitPython}
}
@online{phab_py,
	title = {{Python}{Phabricator}},
	url = {https://pypi.python.org/pypi/phabricator}
}
@online{openhub_MW,
	title = {{openhub}{Mediawiki}},
	url = {https://www.openhub.net/p/mediawiki}
}
@online{MW_doc_phab,
	title = {{Phabricator}{Mediawiki}{documentation}},
	url = {https://phabricator.wikimedia.org/tag/mediawiki-documentation/}
}
@article{Michel_2014,
author = {Felix Michel },
title = {{A Structured Task-Centered Framework for Online Collaboration}},
url = {https://wwwmatthes.in.tum.de/pages/mhk5dp0uzh87/Master-s-Thesis-Felix-Michel},
year = {2014}
}
@online{MW_doc,
	title = {{Mediawiki}{documentation}},
	url = {https://www.mediawiki.org/wiki/Documentation}
}
@online{3P_users,
	title = {{Third-party}{Mediawiki}{Users}{Discussion}},
	url = {https://www.mediawiki.org/wiki/Third-party_MediaWiki_users_discussion}
}
@online{Project_pd,
	title = {{Project:}{PD}{Help}},
	url = {https://www.mediawiki.org/wiki/Project:PD_help}
}
@online{manual_cc,
	title = {{Manual:}{Coding}{Convention}},
	url = {https://www.mediawiki.org/wiki/Manual:Coding_conventions#Documentation}
}
@online{manual_bot,
	title = {{Manual:}{Bots}},
	url = {https://www.mediawiki.org/wiki/Manual:Bots}
}
@online{phab-tools,
	title = {{Phabricator-tools}},
	url = {https://github.com/wikimedia/phabricator-tools}
}
@online{Wm_labs,
	title = {{Wikimedia}{Labs}},
	url = {https://www.mediawiki.org/wiki/Wikimedia_Labs}
}
@online{phab_labs,
	title = {{phab}{wmflabs}},
	url = {https://phab-01.wmflabs.org}
}
@online{mediawiki,
	title = {{Mediawiki.org}},
	url = {https://www.mediawiki.org/wiki/MediaWiki}
}
@online{wm-phab,
	title = {{Phabricator}{Wikimedia}},
	year = {2014},
	url = {http://blog.wikimedia.org/2014/11/24/welcome-to-phabricator-wikimedias-new-collaboration-platform/}
}
@online{gerrit,
	title = {{Gerrit}},
	url = {https://code.google.com/p/gerrit}
}
@online{phab,
	title = {{Phabricator}},
	url = {http://phabricator.org/}
}
@online{irc,
	title = {{IRC}{help}},
	url = {http://www.irchelp.org/}
}
@online{mw_core,
	title = {{Mediawiki-core}},
	url = {https://doc.wikimedia.org/mediawiki-core/master/php}
 }