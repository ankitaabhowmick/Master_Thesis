@article{Garlan2011,
abstract = {Software Architecture emerged in the 1990's as an important sub-field of software engineering. While good architectural design had long been recognized as critical to the success of any complex software system, before then the practice of architecting had relied largely on ad hoc, uncodified, and idiosyncratic techniques and knowledge. By the 2000's the field had matured to the point where there were widely-recognized taxonomies of architectural patterns, techniques for formally representing and analyzing architectures, methods for reviewing an architectural design, widespread adoption of architectural product lines and composition frameworks, and techniques for ensuring conformance between an architecture and an implementation of it. In this talk we reflect on the key enablers of a discipline of software architecture that led to these advances, the central ideas that form its core, and its enduring principles that continue to shape the field of software engineering. We consider both the important concepts on which it builds, as well as those that have built on top of it. Finally, we examine some of the important new trends and challenges that are likely to have an impact on how software architecture will evolve in the future.},
author = {Garlan, David and Shaw, Mary},
doi = {10.1145/2025113.2025116},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Garlan, Shaw - 2011 - Software Architecture Reflections on an Evolving Discipline.pdf:pdf},
isbn = {978-1-4503-0443-6},
journal = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
keywords = {architecture,keynotes,software},
mendeley-tags = {keynotes},
pages = {2},
title = {{Software Architecture: Reflections on an Evolving Discipline}},
url = {http://doi.acm.org/10.1145/2025113.2025116},
year = {2011}
}
@online{crouch_stephen_software_2013,
	title = {The {Software} {Sustainability} {Institute}},
	url = {http://www.software.ac.uk/},
	abstract = {"The Software Sustainability Institute: Changing Research Software Attitudes and Practices," },
	journal = {The Software Sustainability Institute},
	author = {Crouch, Stephen, et. al},
	month = dec,
	year = {2013},
	note = {Computing in Science \& Engineering , vol.15, no.6, pp.74,80, .}
}
@book{BachmannDocumentingSoftware2010,
author = {Bachmann, Felix and Bass, Len and Clements, Paul and Garlan, David and Ivers, James and Little, M and Merson, Paulo and Nord, Robert and Stafford, Judith},
edition = {Second},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bachmann et al. - 2010 - Documenting Software Architectures Views and Beyond.pdf:pdf},
publisher = {Addison-Wesley Professional},
title = {{Documenting Software Architectures: Views and Beyond}},
year = {2010}
}
@online{yeates_stuart_OSS_2008,
	title = {{OSS}{Watch}},
	url = {http://oss-watch.ac.uk/resources/archived/documentation},
	author = {Yeates, Stuart},
	month = jun,
	year = {2008}
}
@article{Fuggeffa1988,
author = {Fuggeffa, Alfonso and Fuggetta, Alfonso and Milano, Politecnico},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/TUM Studies/4th sem/software proess.pdf:pdf},
isbn = {1581132530},
title = {{Software Process : A Roadmap Software Process : A Roadmap}},
volume = {97},
year = {1988}
}
@book{Scacchi2007,
author = {Scacchi, Walt},
booktitle = {Advances in Computers},
doi = {10.1016/S0065-2458(06)69005-0},
isbn = {9780123737458},
issn = {00652458},
pages = {243--295},
publisher = {Elsevier},
series = {Advances in Computers},
title = {{Architectural Issues}},
url = {http://www.sciencedirect.com/science/article/pii/S0065245806690050},
volume = {69},
year = {2007}
}
@article{Zhao2003,
abstract = {The open source development model has defied traditional software development practices by generating widely accepted products (e.g., Linux, Apache, Perl) while following unconventional principles such as the distribution of free source code and massive user participation. Those achievements have initiated and supported many declarations about the potential of the open source model to accelerate the development of reliable software. However, the pronouncements in favor or against this model have been usually argumentative, lacking of empirical evidence to support either position. Our work uses a survey to overcome those limitations. The study explores how software quality assurance is performed under the open source model, how it differs from more traditional software development models, and whether some of those differences could translate into practical advantages given the right circumstances. The findings indicate that open source has certainly introduced a new dimension in large-scale distributed software development. However, we also discovered that the potential of open source might not be exploitable under all scenarios. Furthermore, we found that many of the open source quality assurance activities are still evolving.},
author = {Zhao, Luyin and Elbaum, Sebastian},
doi = {10.1016/S0164-1212(02)00064-X},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Open source,Quality assurance,Software development models,Survey},
month = apr,
number = {1},
pages = {65--75},
title = {{Quality assurance under the open source development model}},
url = {http://www.sciencedirect.com/science/article/pii/S016412120200064X},
volume = {66},
year = {2003}
}

@inproceedings{6923128,
author = {Ding, Wei and Liang, Peng and Tang, Antony and Vliet, Hans Van and Shahin, Mojtaba},
booktitle = {2014 19th International Conference on Engineering of Complex Computer Systems},
doi = {10.1109/ICECCS.2014.26},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ding et al. - 2014 - How Do Open Source Communities Document Software Architecture An Exploratory Survey.pdf:pdf},
isbn = {978-1-4799-5482-7},
keywords = {OSS d,SAD,architecture document elements,architecture documentation,open source software,public domain software,software architecture},
mendeley-tags = {SAD,open source software},
month = aug,
pages = {136--145},
title = {{How Do Open Source Communities Document Software Architecture: An Exploratory Survey}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6923128},
year = {2014}
}
@article{Shahin2009,
abstract = {In the field of software architecture, there has been a paradigm shift from describing the outcome of architecting process mostly described by component and connector (know-what) to documenting architectural design decisions and their rationale (know-how) which leads to the production of an architecture. This paradigm shift results in emergence of various models and related tools for capturing, managing and sharing architectural design decisions and their rationale explicitly. This paper analyzes existing architectural design decisions models and provides a criteria-based comparison on tools that support these models. The major contribution of this paper is twofold: to show that all of these models have a consensus on capturing the essence of an architectural design decision; and to clarify the major difference among the tools and show what desired features are missing in these tools.},
author = {Shahin, Mojtaba and Liang, Peng and Khayyambashi, Mohammad Reza},
doi = {10.1109/WICSA.2009.5290823},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/05290823.pdf:pdf},
isbn = {978-1-4244-4984-2},
journal = {2009 Joint Working IEEE/IFIP Conference on Software Architecture \& European Conference on Software Architecture},
pages = {293--296},
title = {{Architectural design decision: Existing models and tools}},
url = {10.1109/WICSA.2009.5290823$\backslash$nhttp://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5290823},
year = {2009}
}
@book{BachmannDocumentingSoftware2010,
author = {Bachmann, Felix and Bass, Len and Clements, Paul and Garlan, David and Ivers, James and Little, M and Merson, Paulo and Nord, Robert and Stafford, Judith},
edition = {Second},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bachmann et al. - 2010 - Documenting Software Architectures Views and Beyond.pdf:pdf},
publisher = {Addison-Wesley Professional},
title = {{Documenting Software Architectures: Views and Beyond}},
year = {2010}
}
@incollection{bab2009,
abstract = {In this chapter we survey how architects have represented architectural 6 knowledge and in particular architectural design. This has evolved over the last 7 3 decades, from very intuitive and informal, to very structured, abstract and for- 8 mal, from simple diagrams and metaphors, design notations, and specific languages. 9 As our understanding of architectural knowledge evolved, the importance of de- 10 sign rationale and the decision process became more and more prominent. There is 11 however a constant through this evolution: the systematic use of metaphors. 12 3.1},
author = {Kruchten, Philippe},
booktitle = {Software Architecture Knowledge Management},
chapter = {3},
doi = {10.1007/978-3-642-02374-3\_3},
editor = {{Ali Babar}, Muhammad and Dings\o yr, Torgeir and Lago, Patricia and van Vliet, Hans},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kruchten - 2009 - Documentation of Software Architecture from a Knowledge Management Perspective – Design Representation.pdf:pdf},
isbn = {978-3-642-02373-6},
keywords = {architecture knowledge,documenting rational},
mendeley-tags = {architecture knowledge,documenting rational},
pages = {39--57},
publisher = {Springer Berlin Heidelberg},
title = {{Documentation of Software Architecture from a Knowledge Management Perspective – Design Representation}},
url = {http://dx.doi.org/10.1007/978-3-642-02374-3\_3},
year = {2009}
}
@article{Ajila2007,
abstract = {In this paper, we present the results of empirical study of the effects of open source software (OSS) components reuse on software development economics. Specifically, we examined three economic factors – cost, productivity, and quality. This study started with an extensive literature review followed by an exploratory study conducted through interviews with 18 senior project/quality managers, and senior software developers. Then, the result of the literature review and the exploratory study was used to formulate research model, hypotheses, and survey questionnaire. Software intensive companies from Canada and the US were targeted for this study. The period of study was between September 2004 and March 2006. Our findings show that there are strong significant statistical correlations between the factors of OSS components reuse and software development economics. The conclusion from this study shows that software organizations can achieve some economic gains in terms of software development productivity and product quality if they implement OSS components reuse adoption in a systematic way. A big lesson learned in this study is that OSS components are of highest quality and that open source community is not setting a bad example (contrary to some opinion) so far as ‘good practices’ are concerned.},
author = {Ajila, Samuel A. and Wu, Di},
doi = {10.1016/j.jss.2007.01.011},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Adoption,Measurement and economics,Open source software,Productivity,Quality,Reuse,Software process improvement},
month = sep,
number = {9},
pages = {1517--1529},
title = {{Empirical study of the effects of open source adoption on software development economics}},
url = {http://www.sciencedirect.com/science/article/pii/S0164121207000076},
volume = {80},
year = {2007}
}
@InProceedings{michlmayr:quality_problems,
  author =       {Michlmayr, Martin and Hunt, Francis and Probert, David},
  title =        {Quality Practices and Problems in Free Software Projects},
  editor =       {Scotto, Marco and Succi, Giancarlo},
  booktitle =    {Proceedings of the First International Conference on Open Source Systems},
  pages =        {24-28},
  address =      {Genova, Italy},
  year =         {2005},
}
@article {SMR:SMR572,
author = {Kruchten, Philippe},
title = {Contextualizing agile software development},
journal = {Journal of Software: Evolution and Process},
volume = {25},
number = {4},
issn = {2047-7481},
url = {http://dx.doi.org/10.1002/smr.572},
doi = {10.1002/smr.572},
pages = {351--361},
keywords = {agile software development, software development process, process adaptation},
year = {2013},
}
@article{Briand2003,
abstract = { It is a well-known fact that software documentation is, in practice, poor and incomplete. Though specification, design, and test documents-among other things-are required by standards and capability maturity models (e.g., SEI CMM), such documentation does not exist in a complete and consistent form in most organizations. When documents are produced, they tend to follow no defined standard and lack information that is crucial to make them understandable and usable by developers and maintainers. Then a fundamental practical question, which motivated this keynote address, is to better understand what type of documentation is required, what is needed to support its completeness and consistency, and what is the level of precision required for each type of document. These questions cannot be investigated at that level of generality though. Answers are likely to be very context-dependent if they are to be precise. We focus our attention here on object-oriented development and the Unified Modeling Language (UML).},
author = {Briand, L.C.},
doi = {10.1109/CSMR.2003.1192406},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/briandswdoc.pdf:pdf},
isbn = {0-7695-1902-4},
issn = {1534-5351},
journal = {Seventh European Conference onSoftware Maintenance and Reengineering, 2003. Proceedings.},
title = {{Software documentation: how much is enough?}},
year = {2003}
}
@article{SCAMPITeam2013,
author = {{SCAMPI Team}},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/11hb001.pdf:pdf},
keywords = {CMMI,Class A method,Document Description,MDD,Method,SCAMPI A,appraisal,appraisal method},
number = {March},
title = {{Standard CMMI Appraisal Method for Process Improvement (SCAMPI) Version 1.3a: Method Definition Document for SCAMPI A, B, and C}},
year = {2013}
}
@article{Mens2011,
abstract = {Empirical software engineering is concerned with statistical studies that aim to understand and improve certain aspects of the soft- ware development process. Many of these focus on the evolution and maintenance of evolving software projects. They rely on repository min- ing techniques to extract relevant data from software repositories or other data sources frequently used by software developers. We enlarge these empirical studies by exploring social software engineering, study- ing the developer community, including the way developers work, coop- erate, communicate and share information. The underlying hypothesis is that social aspects significantly influence the way in which the software project will evolve over time. We present some preliminary results of an empirical study we are carrying out on the different types of activities of the community involved in the GNOME open source ecosystem, and we discuss suggestions for future work.},
author = {Mens, Tom and Goeminne, Mathieu},
file = {:C$\backslash$:/Users/Ankitaa/Desktop/IWSECO2011-1-InvitedPaper-MensGoeminne.pdf:pdf},
journal = {Proc. 3rd Int. Workshop on Software Ecosystems},
keywords = {empirical software engi- neering,open source software,repository mining,social software engineering,software ecosystem,software evolution},
pages = {1--14},
title = {{Analysing the evolution of social aspects of open source software ecosystems}},
url = {http://ceur-ws.org/Vol-746/IWSECO2011-1-InvitedPaper-MensGoeminne.pdf},
year = {2011}
}
@inproceedings{5314237,
author = {Soto, M and Ciolkowski, M},
booktitle = {Empirical Software Engineering and Measurement, 2009. ESEM 2009. 3rd International Symposium on},
doi = {10.1109/ESEM.2009.5314237},
file = {::},
issn = {1938-6451},
keywords = {DP industry,EU project QualOSS open source assessment model,OSS community sustainability,OSS project,Software engineering,Software measurement,comprehensive measurement framework,open source community performance measurement,open source software,process maturity,product quality standard,project management,public domain software,software development management,software industry,software maintenance,software metrics,software quality},
month = oct,
pages = {498--501},
title = {{The QualOSS open source assessment model measuring the performance of open source communities}},
year = {2009}
}
@incollection{SPM_2005,
year={2005},
isbn={978-0-387-24261-3},
booktitle={Software Process Modeling},
volume={10},
series={International Series in Software Engineering},
editor={Acuña, SilviaT. and Juristo, Natalia},
doi={10.1007/0-387-24262-7_1},
title={Socio-Technical Interaction Networks in Free/Open Source Software Development Processes},
url={http://dx.doi.org/10.1007/0-387-24262-7_1},
publisher={Springer US},
author={Scacchi, Walt},
pages={1-27},
language={English}
}

@article{Shahin2014,
abstract = {Context Given the increased interest in using visualization techniques (VTs) to help communicate and understand software architecture (SA) of large scale complex systems, several VTs and tools have been reported to represent architectural elements (such as architecture design, architectural patterns, and architectural design decisions). However, there is no attempt to systematically review and classify the VTs and associated tools reported for SA, and how they have been assessed and applied. Objective This work aimed at systematically reviewing the literature on software architecture visualization to develop a classification of VTs in SA, analyze the level of reported evidence and the use of different VTs for representing SA in different application domains, and identify the gaps for future research in the area. Method We used systematic literature review (SLR) method of the evidence-based software engineering (EBSE) for reviewing the literature on VTs for SA. We used both manual and automatic search strategies for searching the relevant papers published between 1 February 1999 and 1 July 2011. Results We selected 53 papers from the initially retrieved 23,056 articles for data extraction, analysis, and synthesis based on pre-defined inclusion and exclusion criteria. The results from the data analysis enabled us to classify the identified VTs into four types based on the usage popularity: graph-based, notation-based, matrix-based, and metaphor-based VTs. The VTs in SA are mostly used for architecture recovery and architectural evolution activities. We have also identified ten purposes of using VTs in SA. Our results also revealed that VTs in SA have been applied to a wide range of application domains, among which "graphics software" and "distributed system" have received the most attention. Conclusion SA visualization has gained significant importance in understanding and evolving software-intensive systems. However, only a few VTs have been employed in industrial practice. This review has enabled us to identify the following areas for further research and improvement: (i) it is necessary to perform more research on applying visualization techniques in architectural analysis, architectural synthesis, architectural implementation, and architecture reuse activities; (ii) it is essential to pay more attention to use more objective evaluation methods (e.g., controlled experiment) for providing more convincing evidence to support the promised benefits of using VTs in SA; (iii) it is important to conduct industrial surveys for investigating how software architecture practitioners actually employ VTs in architecting process and what are the issues that hinder and prevent them from adopting VTs in SA. ?? 2014 Elsevier Inc.},
author = {Shahin, Mojtaba and Liang, Peng and Babar, Muhammad Ali},
doi = {10.1016/j.jss.2014.03.071},
file = {:C$\backslash$:/Users/Ankitaa/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Shahin, Liang, Babar - 2014 - A systematic review of software architecture visualization techniques.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Software architecture,Software architecture visualization,Visualization techniques},
pages = {161--185},
publisher = {Elsevier Inc.},
title = {{A systematic review of software architecture visualization techniques}},
url = {http://dx.doi.org/10.1016/j.jss.2014.03.071},
volume = {94},
year = {2014}
}
